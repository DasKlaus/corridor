Entwicklung einer interaktiven Datenvisualisierung für medizinische Studien

Projektdokumentation der betrieblichen Projektarbeit von
Claudia Rössel

Im Ausbildungsberuf Fachinformatiker für Anwendungsentwicklung

Betrieb: extern
Ausführungszeit: 16.5.2016 - 4.6.2016


### Ausgangssituation (15)

#Projektumfeld
Diese Projektarbeit entsteht im Rahmen der externen, d.h. nicht im Rahmen einer Berufsausbildung stattfindenden, Prüfung zum Fachinformatiker für Anwendungsentwicklung. Der Autor ist jedoch seit [xy] in diesem Beruf bei der BioArtProducts GmbH regulär, also ohne ein Ausbildungsverhältnis, angestellt. Aus diesem Grunde wurde sich dafür entschieden, ein Projekt zur späteren Nutzung im Betrieb einzureichen, und dieses in Absprache mit dem Arbeitgeber in der Arbeitszeit durchzuführen.

Unternehmen
Die BioArtProducts GmbH ist Dienstleister für medizinische und pharmazeutische Unternehmen und entwickelt u.a. Software zur Datenerfassung, -verarbeitung und -auswertung, z.B. für medizinische oder pharmazeutische Studien oder Register. Die Auswertung dieser Daten erfolgt meist eng an Kundenvorgaben orientiert in unterschiedlichen Ausgabemedien, eine häufig wiederkehrende Anforderung ist jedoch die Darstellung des Datenbestandes als Diagramme. Die gebräuchlichsten Diagrammtypen können allerdings nur die Verteilung einzelner Werte (Balkendiagramm, Tortendiagramm) oder den Zusammenhang zwischen zwei Werten visualisieren. Die erfassten Daten zeigen sich im Gegensatz dazu in der Regel komplexer; so werden von Patienten üblicherweise Daten aus der Krankengeschichte, Medikamente, Risikofaktoren und bestehende Erkrankungen neben einer Vielzahl von Laborwerten erfasst. Diese Daten werden bislang nur selektiv auf Zusammenhänge hin untersucht, ein schneller Überblick über die Zusammenhänge ist nicht möglich. Hier soll diese Projektarbeit Abhilfe schaffen.

#Prozessschnittstellen
Für die Diagrammerstellung kommt in der BioArtProducts GmbH die JavaScript-Bibliothek d3 [Quelle, Fußnote] zum Einsatz. Mit dieser ist seit geraumer Zeit eine Sammlung dynamischer Funktionen in Entwicklung, die ein Konfigurationsobjekt und Daten im Json-Format entgegennehmen, und den Angaben im Konfigurationsobjekt entsprechend Daten aggregieren, zählen und darstellen. Eine Anbindung an diese Funktionen ist gewünscht und soll dadurch realisiert werden, dass in der Oberfläche dieser Arbeit Spalten des Datenbestandes und die Form der Visualisierung ausgewählt, sowie optionale Konfigurationsparameter, wie z.B. Wertebereich, Diagrammtyp, Zuordnung der Daten zu Achsen, übergeben werden können. Dementsprechend soll das Programm die gewählten Daten vorbereiten und die entsprechende Funktion aufrufen, um ein Diagramm zu generieren.

Die Daten, die das im Rahmen dieser Projektarbeit entwickelte Programm nachempfindet, sollen im Json-Format entgegengenommen werden. Dies passiert durch Zuweisung einer Variable [Parameter für init], üblicherweise durch ein zugrundeliegendes Java-Backend, in das es eingebettet wird. Zum Testen und Präsentieren müssen jedoch Beispieldaten erzeugt werden, die von ihrer Art denen, die in Projekten der BioArtProducts GmbH erfasst werden, nachempfunden sind.

#Projektziel
Ziel ist eine Visualisierung, die Kunden sowie potentiellen Kunden der BioArtProducts GmbH angeboten, und die in bereits bestehende Projekte mit geringem Aufwand eingebunden werden kann. Sie soll Auftraggebern von Studien und Registern, aber auch Ärzten und Schwestern, die für diese Studien und Register Daten erfassen, einen schnellen und interaktiven Überblick über den Datenbestand und Abhängigkeiten zwischen einzelnen Variablen bieten und als Vorstufe zur Erstellung von Diagrammen, die eine oder zwei Spalten des Datenbestands betrachten, dienen.

Die Visualisierung erfolgt in Form von Säulen, die die jeweilig erfassten Daten als Punktwolke ("beeswarm plot") darstellen - eine Säule für jede pro Datensatz erfasste Spalte. Für Zahlenwerte wird eine lineare, für Strings eine gewichtete Ordinalskala (Werteblöcke, deren Höhe abhängig von der Häufigkeit des jeweiligen Wertes sind) verwendet. Jede Spalte soll dabei frei konfigurierbar bezüglich ihres angezeigten Wertebereichs sein. Auch soll es möglich sein, Grenzwerte zu kennzeichnen. Auf diese Weise lassen sich bereits die jeweiligen Werte und ihre Verteilung im Datenbestand auf einen Blick beurteilen. Nun lassen sich interaktiv einzelne Einträge (i.d.R. Patienten) hervorheben, indem der Mauszeiger über einen Punkt bewegt wird - dieser sowie korrespondierende Punkte anderer Spalten werden dann hervorgehoben. Über Schieberegler am vertikalen Ende der Säulen können Wertebereiche eingegrenzt werden, außerhalb dessen Punkte als deaktiviert ausgegraut werden. Die Auswirkung einer Variablen auf alle anderen Werte kann so sichtbar gemacht werden.

Sind so Zusammenhänge offenbar worden, die genauer dargestellt werden sollen, können die betreffenden Spalten zu einer Auswahl hinzugefügt werden. Für die Darstellung dieser Spalten als Diagramm werden im Folgenden Konfigurationsdetails abgefragt: welche Achse welche Werte darstellen soll, die Art des Diagramms (Linien, Balken) und betrachteter Wertebereich. Dann lässt sich das entsprechende Diagramm generieren oder alternativ als Grafik speichern.
[Skizze, Entwurf]

#Kundenwünsche
Um die spätere Nutzung durch andere Mitarbeiter zu erleichtern, ist der Code vernünftig zu kommentieren und soll vergleichbar mit bisherigen d3-Anwendungen aufgebaut sein. Dazu gehört die konsistente Benennung von Variablen und Methoden in Englisch, Formatierung und Einrückungen nach Firmenstandard, die Verwendung eines Konfigurationsobjektes zur leichten Anpassung an projektspezifische Anforderungen und Design und die Trennung von Berechnungen und grafischer Darstellung. Die Nutzeroberfläche ist möglichst einfach zu halten, da sie je nach Projekt sehr unterschiedlich implementiert werden wird und unter Umständen auch vollkommen entfällt, um zum Beispiel eine im Code vorkonfigurierte, nicht änderbare Darstellung zu präsentieren.

Abhängigkeiten von anderen Bibliotheken und Tools sollen möglichst vermieden werden. Aus diesem Grund wurde, abweichend vom Projektantrag, sich gegen ein Farbmanagement entschieden. Die Darstellung erfolgt in Graustufen, ist jedoch leicht anpassbar und kann nach Bedarf erweitert werden.

#Teilaufgaben
Folgende Teilaufgaben wurden identifiziert:
 - Projektplanung
	Projektbeschreibung, Anforderungsanalyse, Absprachen im Unternehmen, grundlegende Architekturentscheidungen, Zeit-, Ressourcen- und Ablaufplanung
 - Erstellung von Beispieldaten
	Auswahl sinnvoller Spalten, Identifikation von Grenzwerten und üblicher Verteilung von Werten sowie die Generierung dieser Daten unter Berücksichtigung dieser Verteilung und Grenzwerte mit Formeln, die Abhängigkeiten zwischen den Werten beinhalten.
 - Säulendarstellung von Daten als beeswarm plot für Zahlen und Zeichenketten
	Iterative Platzierung von Datenpunkten in einem SVG-Graphen, dynamische Anpassung der Skala, Streuung der Punkte auf der X-Achse durch Kollisionserkennung, Performanzoptimierung und Tests all dieser Features.
 - Eingrenzung des betrachteten Wertebereichs von Säulen
	Gestaltung von Bedienelementen, Drag & Drop-Funktionalität von Bedienelementen, einfärben der eingegrenzten Zellen, Färben korrespondierender Zellen, Sicherstellen der Funktionalität bei Begrenzung mehrerer Spalten oder Begrenzung während des Zeichnens eines Graphen, Einrasten der Bedienelemente an Grenzwerte und Tests all dieser Features
 - Nutzeroberfläche erstellen
	Spalten zur Darstellung auswählen, variable Datenmengen generieren, Geschwindigkeit der Darstellung anpassen, Datenstruktur und Grenzwerte eingeben, Testen
 - Daten zur Diagrammerstellung vorbereiten
	Konfiguration erfassen, Daten gruppieren
 - Diagramme erstellen
	Diagramm zeichnen, speichern, Design, Testen
 - Projektarbeit und Kundendokumentation schreiben
	Projektarbeit entsprechend IHK-Bewertungsmatrix auf Grundlage von Planung, Kundendokumentation zweisprachig anlegen und in der Anwendung selbst anzeigen, Korrekturlesen

### Ressourcen- und Ablaufplanung (15)

#Ablaufplanung
Die Zeitplanung erfolgt entsprechend der Teilaufgaben.

Planung: 12h
Beispieldaten mit Abhängigkeiten: 4h
Spaltendarstellung (int, enum, float, array) (Skala, Verteilung, iterativ (Skala!), Radius, Kollision, Performanz, design) - Tests: 28h
Limits (drag & drop, Zellen färben, korrespondierende Zellen färben, nur entfärben wenn nirgendwo limitiert, Während Spaltenerzeugung (Skala!), snap to boundaries (Skala! Enum!), beidseitig, design) - Testen: 12h
Oberfläche (spalten hinzufügen, Daten generieren mit Anzahl, Geschwindigkeit, Spalten benennen/Einheiten/boundaries (dataStructure)) - Testen: 8h
Spalten zur Diagrammerstellung vorbereiten (Konfiguration erfassen, Daten gruppieren) - Testen: 6h
Diagramm erstellen (malen, speichern, design) - Testen: 4h
Projektarbeit schreiben - Korrekturlesen: 12h
Kundendokumentation (Anleitung, zweisprachig, design) - Korrekturlesen: 2h

Gesamt: 80h

[dingsdiagramm mit kritischem Pfad etc]

Der Durchführungszeitraum streckt sich (entgegen den Angaben im Projektantrag) auf drei Wochen statt auf zwei, da die Projektarbeit in der Arbeitszeit des Anstellungsverhältnisses bei der BioArtProducts GmbH erstellt wird, und die vertragliche Arbeitszeit nur 25 Stunden pro Woche umfasst. Der Zeitraum selbst wurde aufgrund hoher Aufgabenlast im beantragten Zeitraum (18.-29.04.2016) und mit Rücksicht auf die notwendige Vorbereitung auf die schriftliche Abschlussprüfung am [] auf die drei Wochen vor dem durch die IHK bestimmten Abgabetermin am 06.06.2016 gelegt.

Der Ablaufplan gestaltet sich daher wie folgt:

[dingsablaufplan?]

#Ressourcenplanung
Die Projektarbeit wird am Laptoparbeitsplatz mit Linux Ubuntu 14.04 der BioArtProducts GmbH durchgeführt. Versionskontrolle erfolgt mit git, Code und Dokumentation werden im Texteditor gedit 3.10.4 geschrieben. Die Endfassung der Projektdokumentation wird mit Libre Office erstellt, Grafiken für die Dokumentation werden in InkScape 0.48 gestaltet. Für die Durchführung der Arbeit müssen weder Hard- noch Software angeschafft werden. 

#kostenplanung
Die Kosten des Projekts liegen ausschließlich im Personalbereich, d.h. der Bereitstellung eines Arbeitsplatzes mit entsprechenden Arbeitsmitteln sowie Lohnzahlungen.
Zur Ermittlung der Anforderungen wurden im Vorfeld und in der Planungsphase Mitarbeitergespräche geführt. Zwischenstände sollen präsentiert und durch Kollegen getestet werden und zur Qualitätssicherung wird es Code Reviews geben. Daher schlüsseln sich die Kosten folgendermaßen auf:

Entwicklungskosten	Antragsteller	80h	Personal	Ressourcen	Gesamt
Mitarbeitergespräche zur Vorbereitung und Anforderungsanalyse	Mitarbeiter	4h
Code-Review und Tests	Mitarbeiter	4h

Für einen Mitarbeiter wird ein Stundensatz von 25€ angenommen. Ressourcenkosten für den Arbeitsplatz liegen bei schätzungsweise 15 pro Stunde.

### Durchführung und Auftragsbearbeitung (30)

Für das Projekt wurde ein Git-Repository angelegt und ein Name gewählt, unter dem die Funktionen und Objekte aufgerufen werden können, die es zur Verfügung stellen soll. Dafür wurde sich für "Correlated Interactive Data Organisation", kurz "Corridor", entschieden, da sich dies als Kurzform gut merken und aussprechen lässt und die Langform das Kernziel des Projektes gut beschreibt. Im ersten Schritt wurden HTML- und CSS-Datei angelegt, Abhängigkeiten (d3) eingebunden und zwei Javascript-Dateien angelegt. Eine (data.js) beinhaltet alle Scripte, die für die Datenerzeugung notwendig sind und präsentationsspezifische Funktionen bereitstellen, die andere (main.js) alle übrigen Funktionen. Wird das Programm in anderen Projekten eingesetzt, genügt es zur Verwendung, die main.js einzubinden. Aus diesem Grund wurde auf eine weitere Spaltung in verschiedene Dateien verzichtet.
Im Folgenden wird die Funktionsweise des Programms beschrieben, Implementierungsdetails können dem kommentierten Quellcode entnommen werden.

#Beispieldaten mit Abhängigkeiten
Um für Testzwecke gleichbleibende Daten zu erhalten, wurde eine Zufallszahlenimplementierung, die mit einem Salz funktioniert, gewählt, also konsistent die immer gleichen Zahlen produziert, sofern das Salz, das der Funktion als Parameter übergeben wird, das gleiche ist. Ebenfalls benötigt wurde eine Funktion zur Erzeugung von Zahlen in Gaussscher Normalverteilung. Hier wurde die Java-Implementierung umgesetzt und erweitert um die Möglichkeit, den gewünschten Mittelwert, die Standardabweichung und eine Funktion zur weiteren Beeinflussung des erzeugten Wertes zu übergeben.
Als Beispieldaten wurden Alter, Geschlecht, Medikamente, Risikofaktoren, Diagnosen und die Blutfettwerte LDL (Low Density Lipid), HDL (High Density Lipid), Lp(a) (Lipoprotein a) und Triglyceride gewählt. Diese Werte werden für verschiedene Studien, die von der BioArtProducts GmbH betreut werden, erhoben, so dass Häufigkeit von Erkrankungen und Verteilung von Laborwerten von Patienten, die für Apheresebehandlung infrage kommen, aus diesen Datenbeständen erhoben und näherungsweise nachgebildet werden können. Um zu Demonstrationszwecken Abhängigkeiten aufzeigen zu können, wurden Korrelationen für diese Daten in die Formeln zur Generierung eingebaut. Diese stellen keine realen Zusammenhänge dar, sondern dienen der Veranschaulichung, wie das Projekt Korrelationen sichtbar machen kann. Reale Daten können aufgrund von Datenschutzbestimmungen [Quelle] nicht verwendet werden.

#Spaltendarstellung
Die Erzeugung eines Graphen zur Darstellung dieser Werte wurde mit der Visualisierungsbibliothek d3 [Quelle] realisiert. In einem SVG [Quelle] fester Breite und von der Browserfensterhöhe abhängiger Höhe werden Datenpunkte auf y-Achse entsprechend ihres Wertes in der darzustellenden Spalte platziert. Die entsprechende Skala wird initial für den ersten Wert erstellt und mit den folgenden Daten nach Bedarf angepasst, und aktualisiert bei Veränderungen alle vorher platzierten Punkte. Für Zahlenwerte wird eine lineare Skala verwendet, entgegen dem Projektantrag wird hierbei nicht zwischen Fließkomma- und Ganzzahlen unterschieden, da in den Anforderungen an die Darstellung keine sinnvollen Unterschiede zwischen beiden bestehen. Zeichenketten wie z.B. Geschlecht oder Medikamente erhalten einen entsprechend ihrer Häufigkeit großen Bereich, in dem sie in Gausscher Normalverteilung zufällig platziert werden. Auf diese Weise entstehen für letztere Werte anschauliche Punktwolken, deren Größe die Häufigkeit des Auftretens des jeweiligen Wertes wiederspiegelt. Für die Verteilung auf der x-Achse wird jeder Punkt zunächst in der Mitte der Spalte platziert und im Folgenden mithilfe einfacher Kollisionserkennung (die jeden Punkt der Einfachkeit halber als Quadrat auffasst) so lange im wachsenden Abstand wechselnd links oder rechts von dieser Mitte bewegt, bis keine Überschneidung mit anderen Punkten mehr vorliegt. Auf diese Weise wird sichergestellt, dass jeder Punkt einzeln erkannt und ausgewählt werden kann. Hat ein Punkt keinen Platz mehr, wird der Radius aller Punkte verkleinert und seine Position auf der x-Achse neu berechnet. Auf diese Weile ist das Programm in der Lage, auf Bildschirmen mit einer Auflösung von 1080 Pixeln in der Höhe je nach Verteilung der Werte mehrere tausend Punkte darzustellen. Da in dieser Größenordnung auch die Generierung der Graphen einige Sekunden in Anspruch nimmt, und auf dem zum Testen verwendeten Arbeitsplatz Verzögerungen bei der Bedienung der interaktiven Elemente auftreten, wird davon abgeraten, das Programm in seiner jetzigen Form auf größere Datenbestände anzuwenden und die Darstellung für diese nicht weiter optimiert.
Punkte werden iterativ platziert, um Daten mit wenig Anpassungen auch z.B. per Ajax entgegennehmen zu können, ohne dass der Gesamtdatenbestand und mit ihm Extremwerte für die Skalenerzeugung vorher bekannt sein müssen.

#Interaktive Wertebereichsbegrenzung
Am oberen und unteren Ende jeder Spalte sind Elemente, die als Schieberegler fungieren, platziert. Klickt der Anwender mit der Maus und bewegt sie, folgen sie der Höhe des Mauszeigers. Auf diese Weise
können schnell und einfach Grenzwerte bestimmt werden, die aus der Betrachtung entfallen. Die auf diese Weise ausgeschlossenen Punkte werden blass gefärbt, so dass sie deutlich als deaktiviert erkennbar sind. Ebenfalls entfärbt werden korrespondierende Zellen anderer Spalten. Jede Zelle speichert als Attribut, ob sie in ihrer Spalte begrenzt wurde. Zellen werden dann entfärbt, wenn mindestens eine korrespondierende Zelle als deaktiviert markiert ist, so dass mehrere Schieberegler auf mehreren Spalten benutzt werden können. Angepasst werden musste dafür ebenfalls die Erzeugung von Zellen, da bereits beim Platzieren determiniert werden muss, ob eine Eingrenzung vorliegt oder nicht. Handelt es sich beim eingegrenzten Wert nicht um Zahlenwerte, sondern Zeichenketten, rastet der Schieberegler nur an Grenzen zwischen den einzelnen Werteblöcken ein, anstatt frei beweglich zu sein. Sind auf einer linearen Skala Grenzwerte vorhanden, rastet der Regler ein, sobald er sich auf wenige Pixel einer solchen Grenze nähert. Ändert sich die Skala einer Spalte, weil noch Datenpunkte platziert werden, werden die Regler entsprechend ihrer Position auf der Skala, nicht ihrer absoluten Position, neu platziert.

#Nutzeroberfläche
Bei Öffnen der HTML-Datei wird zunächst die Menge an Beispieldaten, die generiert werden soll, abgefragt. Empfohlen werden hier Werte von 50 bis 1000. Generieren von Daten entfernt diese Eingabemöglichkeit, an ihre Stelle tritt ein Auswahlfeld aller verfügbarer Spalten. Wird dort eine ausgewählt, wird diese wie bereits beschrieben dargestellt. Die Geschwindigkeit, mit der Punkte platziert werden, ist ebenfalls einstellbar, in Millisekunden je Punkt. Welche Größenordnung hierbei sinnvoll ist, richtet sich nach der Gesamtmenge an Daten und der Leistungsfähigkeit des verwendeten Computers. Je mehr Zellen bereits platziert wurden, desto länger kann die Berechnung der Position des nächsten Punktes dauern. Eine gute Faustregel ist, etwa ein Zehntel der Gesamtdatenmenge anzugeben. Hier besteht offensichtlich noch Optimierungsbedarf der Performanz.
Sind Spalten platziert, können diese ausgewählt werden, indem der Spaltentitel angeklickt wird. Dadurch erhält der Nutzer die Möglichkeit, Titel, Einheit und Grenzwerte zu verändern.

#Spalten zur Diagrammerstellung vorbereiten und Diagramme erstellen
Bei der Begutachtung bislang zur Anwendung gekommener Diagrammfunktionen, wie sie in [Prozessschnittstellen] beschrieben wurden, wurde erheblicher Überarbeitungsbedarf festgestellt. Größtes Problem stellen Redundanzen und Uneinheitlichkeiten dar - ähnliche Funktionen nehmen zum Teil gänzlich unterschiedlich vorbereitete Daten entgegen. Einzelne Diagrammtypen sind nicht dynamisch konfigurierbar, sondern stellen spezifische Einzellösungen dar, die nicht wiederverwendet werden können. Manche Konfigurationsmöglichkeiten bestehen nicht für alle Diagrammtypen, und viele visuelle Aspekte sind nicht automatisch gelöst, erfordern zum Beispiel die manuelle Übergabe von Zeilenumbrüchen für Beschriftungen. Aus diesem Grunde konnte dieses Feature nicht wie geplant eingebaut werden. Diese Projektarbeit wird jedoch auch nach Abgabe fortgeführt, verbessert und erweitert. Dabei wird auch der alte Funktionsbestand grundlegend überarbeitet und vereinheitlicht, so dass eine Ankopplung später möglich wird.
Die für diese Aufgabe veranschlagte Zeit wurde in die dynamische Anpassung der Skalen und Punktradien gesteckt, um ein visuell ansprechendes Ergebnis präsentieren zu können.

### Projektergebnisse (15)
#Anpassungen

Umgesetzt wurde ein Visualisierungstool, das aus Daten eine Spaltenansicht generiert, die iterativ Datenpunkte platziert und ihre Skala und die Punktgröße nach Bedarf anpasst. Durch Eingrenzung des Wertebereichs mit Schiebereglern können Zusammenhänge aufgezeigt werden.
Größte Abweichung zum Projektantrag stellt der vollständige Verzicht auf die Möglichkeit dar, Spalten zur Diagrammerstellung auszuwählen und Diagramme zu generieren. Ursache hierfür findet sich in der ungenügenden Qualität und Einheitlichkeit des Codes, der dafür eingebunden werden sollte.


Soll-Ist-Vergleich
Soll:
Planung: 12h
Beispieldaten mit Abhängigkeiten: 4h
Spaltendarstellung (int, enum, float, array) (Skala, Verteilung, iterativ (Skala!), Radius, Kollision, Performanz, design) - Tests: 28h
Limits (drag & drop, Zellen färben, korrespondierende Zellen färben, nur entfärben wenn nirgendwo limitiert, Während Spaltenerzeugung (Skala!), snap to boundaries (Skala! Enum!), beidseitig, design) - Testen: 12h
Oberfläche (spalten hinzufügen, Daten generieren mit Anzahl, Geschwindigkeit, Spalten benennen/Einheiten/boundaries (dataStructure)) - Testen: 8h
Spalten zur Diagrammerstellung vorbereiten (Konfiguration erfassen, Daten gruppieren) - Testen: 6h
Diagramm erstellen (malen, speichern, design) - Testen: 4h
Projektarbeit schreiben - Korrekturlesen: 12h
Kundendokumentation (Anleitung, zweisprachig, design) - Korrekturlesen: 2h

Ist:
planung: 7h (-5)
beispieldaten: 5h (+1)
spaltendarstellung: 12h (+4)
iterative, iterative scale: 7h
dynamic radius: 5h
arrays, enums: 10h
design: 8h (Oberfläche, labels, Aussehen der Balken)
cleanup: 4h (kommentare, struktur) (+4)
limits: 16h (+4)
projektarbeit: 10h (-2)
kundendokumentation: 2h
86 h

Im Zeitaufwand sind einige Abweichungen feststellbar. Die Planung nahm deutlich weniger Zeit in Anspruch als veranschlagt, da Teilaufgaben aus dem Projektantrag und Absprachen im Unternehmen klar hervorgingen. Es konnte daher schnell zur Entwicklung übergegangen werden. Die Vorbereitung von Beispieldaten dauerte eine Stunde länger als erwartet. Da JavaScript über keine native Gausszahlen-Methode verfügt, musste diese selbst implementiert werden. Auch mussten für die Daten Formeln entwickelt werden, die klare Abhängigkeiten zeigen und dennoch zu glaubwürdiger Verteilung von Werten führen.
Verschätzt wurde sich auch mit dem Aufwand der Spaltendarstellung. Während die grundlegende Verteilung schneller als gedacht umgesetzt werden konnte (12h), erforderten die dynamischen Skalen und Zellradien mehrfache Umstrukturierung des Aufbaus (12h). Auch die Verteilung von Punkten, die Zeichenkettenwerte darstellen, zeigte sich aufgrund der veränderlichen Skalen als umfangreiche Aufgabe (10h). Insgesamt betrug die Abweichung für diese Aufgaben, die unter einem Punkt in der Planung zusammengefasst waren, jedoch nur vier Stunden. Keine Abweichung gab es im Bereich Oberfläche, zu dem in der Ist-Rechnung auch Design der Graphen, z.B. Labels und dynamische Höhe, gezählt werden. 
Die Eingrenzung des Wertebereichs stellte sich als Herausforderung heraus. Da die Anpassung der Darstellung in Echtzeit erfolgen sollte, musste hier nicht nur eine effektive, sondern auch effiziente Lösung gefunden werden. Auf Performanz lag ein besonderes Augenmerk.
Im Schreiben der Projektarbeit konnten jedoch zwei Stunden Zeit eingespart werden. Aufgrund konsistenter Verwendung von Versionskontrolle und gründlicher Kommentierung des Codes ließen sich Arbeitsweise, Entscheidungsprozesse und Zeitaufwand leicht nachvollziehen und zusammenfassen.
Insgesamt wurde die veranschlagte Zeit leicht überschritten. Dies konnte durch wenige Überstunden ausgeglichen werden, so dass eine pünktliche Abgabe erfolgen kann.

#Qualitätskontrolle
Zur Sicherstellung der Lesbar- und Nachvollziehbarkeit des Codes wurde dieser ausführlich kommentiert. Änderungen wurden mittels Versionskontrolle per git festgehalten, so dass sie nachvollziehbar sind und jederzeit rückgängig gemacht werden können. Am Ende der Implementierung jedes Features stand das Testen desselbigen mit verschiedenen Datenbeständen und Bildschirmgrößen, um volle Funktionstüchtigkeit und konsistente Darstellungsqualität zu gewährleisten. Relevante Zwischenschritte wurden Mitarbeitern vorgeführt und diesen Gelegenheit gegeben, den Code zu studieren und eigenständig zu testen. Nach Abgabe dieser Arbeit wird eine engere Zusammenarbeit angestrebt, da der Verfasser für weitergehende Anpassungen nicht mehr gewährleisten muss, diese eigenständig und ohne fremde Hilfe durchzuführen.

Ausblick
Das Programm soll für die BioArtProductsGmbH zum Einsatz kommen und wird daher weiterentwickelt. Dafür wird das Programm zunächst mit realen Studiendaten getestet und im Unternehmen präsentiert, um Änderungswünsche und Verbesserungsvorschläge zu sammeln und die Weiterentwicklung inhaltlich und zeitlich zu planen. Dazu gehört auch die Überarbeitung der Funktionen, die zur Diagrammerstellung entwickelt wurden und an die dieses Programm ursprünglich angeschlossen werden sollte. Ebenfalls notwendig ist die Verbesserung der Performanz; insbesondere die Neuberechnung einer Skala kann bei großen Datenmengen zu Einfrieren der Webseite führen und muss, wo sie sich nicht beschleunigen lässt, ebenfalls iterativ erfolgen.
Zu den von Verfasserseite vorgeschlagenen Verbesserungen zählen weiterhin:
* Kopplung von allen ressourcenintensiven Selektionen an Timer oder AnimationFrames, um Einfrieren zu verhindern
* Lässt sich der Radius einer Zelle nicht weiter verkleinern, wenn die nächste Zelle keinen Platz mehr findet, soll sich seine Transparenz verringern und Überlappungen erlaubt werden
* Spalten mit Zeichenkettenwerten könnten Werte mit geringer Häufigkeit zu einem "Sonstige"-Block addieren
* Farbmanagement für Grenzwerte und Zeichenkettenwertegruppen
* Spalten mit Datumswerten ermöglichen
* Weitere Darstellungsmöglichkeit von Spalten mit mehreren Werten pro Datensatz als Menge der Werte (z.B. Darstellung der Anzahl der Medikamente pro Patient)
* Überdenken des Wertebereichsbegrenzungskonzepts: unterbrochene Wertebereiche ermöglichen und Zeichenkettenwerte einzeln an- und abwählen, statt Schieberegler von oben und unten
* Anzeige des exakten Grenzwertes auf numerischen Skalen bei Bewegen der Schieberegler


### Gestaltung des Projektes (15)
Da das Programm in verschiedene Projekte eingebunden werden soll, die sich in ihrer Gestaltung stark voneinander unterscheiden können, wurde die Gestaltung möglichst neutral gehalten. Farben, Schriften und Graphenmaße können über CSS beziehungsweise Konfigurationsvariablen leicht angepasst werden. Für die Präsentation wurde ein schlichtes Design in unaufdringlichen Farben gewählt, das die Visualisierung für sich sprechen lässt.
Die Gestaltung und Formatierung der Projektdokumentation wurde nach den IHK-Richtlinien [https://www.rostock.ihk24.de/aus_und_weiterbildung/Pruefungen/abschlusspruefung/Dokumentation_Projektarbeit/2646884] vorgenommen.

### Kundendokumentation (10)


###TODO bis zur Abgabe
#unbedingt
Dokumentation fertig schreiben
Kundendokumentation in Projekt selbst einbauen
Dokumentation in Libre Office kopieren und formatieren
Tabellen und Grafiken für Dokumentation erstellen
// TODO: nest functions into object, so there's no accidental overloading when using this as a library
// TODO: limit snap to boundaries
// TODO: limit keep relative position on scale on rescale
// TODO: if enum, only ever snap limit to boundaries (how to act on sort change on rescale??)
// TODO: tooltip show all data?
// TODO: busy flag to avoid painting while scale repainting?

#vielleicht
// TODO: remove css? At least everything not pertaining specifically to the presentation?
// TODO: select a column and configure dataStructure
// TODO: make height responding to resize
// TODO: enter structure for data
// TODO: in HTML make checkbox if data generation should provide structure or not and get structure from UI
// TODO: init should be called corridor and return the object, so it could be used like corridor().blablubb etc
// TODO: limit is buggy on rescale
// TODO: what if labels too wide?
// TODO: requestAnimationFrame
// TODO: if label is larger, make numbers smaller, cut off text, on hover write it out large
// TODO: boundaries for non-enums
// TODO: show percentages of active columns

